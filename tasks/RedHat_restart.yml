---
- name: Enable the "network" service
  ansible.builtin.service:
    name: network
    enabled: true
  check_mode: true
  register: network_service
  ignore_errors: true
  when: network_allow_service_restart

- name: Verify if the "network" service is enabled
  ansible.builtin.set_fact:
    network_service_enabled: "{{ not network_service.failed
        and not network_service.changed }}"
  when: network_allow_service_restart

- name: Enable the NetworkManager service
  ansible.builtin.service:
    name: "NetworkManager"
    enabled: true
  check_mode: true
  register: network_manager_service
  ignore_errors: true
  when: network_allow_service_restart

- name: Verify if the "NetworkManager" service is enabled
  ansible.builtin.set_fact:
    network_manager_service_enabled: "{{ not network_manager_service.failed
        and not network_manager_service.changed }}"
  when: network_allow_service_restart

- name: Restart the "network" service on Red Hat systems
  ansible.builtin.service:
    name: network
    state: restarted
  when: >
    (network_allow_service_restart
     and network_service_enabled)
     and (ether_result is changed
          or bond_port_result is changed
          or bond_result is changed
          or vlan_result is changed
          or bridge_result is changed
          or bridge_port_result is changed)

- name: Restart the "NetworkManager" service on Red Hat systems
  ansible.builtin.service:
    name: network
    state: restarted
  when: >
    (network_allow_service_restart
    and network_manager_service_enabled) and
    (ether_result is changed or
     bond_port_result is changed or
     bond_result is changed or
     vlan_result is changed or
     bridge_result is changed or
     bridge_port_result is changed)
